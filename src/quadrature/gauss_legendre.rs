// 返回 Gauss-Legendre 积分点和权重数组（精度达 f64 上限） 要求第i个点和第n-i个点对称
const fn gauss_legendre_points<const N: usize>() -> Option<(&'static [f64], &'static [f64])> {
    match N {
        1 => Some((&[0.0], &[2.0])),

        2 => Some((&[-0.5773502691896257, 0.5773502691896257], &[1.0, 1.0])),

        3 => Some((
            &[-0.7745966692414834, 0.0, 0.7745966692414834],
            &[0.5555555555555556, 0.8888888888888888, 0.5555555555555556],
        )),

        4 => Some((
            &[
                -0.8611363115940526,
                -0.3399810435848563,
                0.3399810435848563,
                0.8611363115940526,
            ],
            &[
                0.34785484513745385,
                0.6521451548625462,
                0.6521451548625462,
                0.34785484513745385,
            ],
        )),

        5 => Some((
            &[
                -0.9061798459386640,
                -0.5384693101056831,
                0.0,
                0.5384693101056831,
                0.9061798459386640,
            ],
            &[
                0.23692688505618908,
                0.47862867049936647,
                0.5688888888888889,
                0.47862867049936647,
                0.23692688505618908,
            ],
        )),

        6 => Some((
            &[
                -0.9324695142031521,
                -0.6612093864662645,
                -0.2386191860831969,
                0.2386191860831969,
                0.6612093864662645,
                0.9324695142031521,
            ],
            &[
                0.17132449237917036,
                0.3607615730481386,
                0.4679139345726910,
                0.4679139345726910,
                0.3607615730481386,
                0.17132449237917036,
            ],
        )),

        7 => Some((
            &[
                -0.9491079123427585,
                -0.7415311855993945,
                -0.4058451513773972,
                0.0,
                0.4058451513773972,
                0.7415311855993945,
                0.9491079123427585,
            ],
            &[
                0.12948496616886969,
                0.27970539148927664,
                0.3818300505051189,
                0.4179591836734694,
                0.3818300505051189,
                0.27970539148927664,
                0.12948496616886969,
            ],
        )),

        8 => Some((
            &[
                -0.9602898564975363,
                -0.7966664774136267,
                -0.5255324099163289,
                -0.1834346424956498,
                0.1834346424956498,
                0.5255324099163289,
                0.7966664774136267,
                0.9602898564975363,
            ],
            &[
                0.10122853629037626,
                0.22238103445337448,
                0.31370664587788727,
                0.3626837833783622,
                0.3626837833783622,
                0.31370664587788727,
                0.22238103445337448,
                0.10122853629037626,
            ],
        )),

        9 => Some((
            &[
                -0.9681602395076261,
                -0.8360311073266358,
                -0.6133714327005904,
                -0.3255242819007267,
                0.0,
                0.3255242819007267,
                0.6133714327005904,
                0.8360311073266358,
                0.9681602395076261,
            ],
            &[
                0.0812743883615744,
                0.1806481606948574,
                0.26061069640293545,
                0.3123470770400028,
                0.3302393550012598,
                0.3123470770400028,
                0.26061069640293545,
                0.1806481606948574,
                0.0812743883615744,
            ],
        )),

        10 => Some((
            &[
                -0.9739065285171717,
                -0.8650633666889845,
                -0.6794095682990244,
                -0.4333953941292472,
                -0.1488743389816312,
                0.1488743389816312,
                0.4333953941292472,
                0.6794095682990244,
                0.8650633666889845,
                0.9739065285171717,
            ],
            &[
                0.06667134430868814,
                0.1494513491505806,
                0.21908636251598204,
                0.26926671930999635,
                0.29552422471475287,
                0.29552422471475287,
                0.26926671930999635,
                0.21908636251598204,
                0.1494513491505806,
                0.06667134430868814,
            ],
        )),

        // n = 11
        11 => Some((
            &[
                -0.9782286581460570,
                -0.8870625997680953,
                -0.7301520055740542,
                -0.5190961292068118,
                -0.2695431559523450,
                0.0,
                0.2695431559523450,
                0.5190961292068118,
                0.7301520055740542,
                0.8870625997680953,
                0.9782286581460570,
            ],
            &[
                0.0556685671161737,
                0.1255803694649046,
                0.18629021092773426,
                0.2331937645919905,
                0.2628045445102467,
                0.2729250867779007,
                0.2628045445102467,
                0.2331937645919905,
                0.18629021092773426,
                0.1255803694649046,
                0.0556685671161737,
            ],
        )),

        // n = 12
        12 => Some((
            &[
                -0.9815606342467192,
                -0.9041172563704749,
                -0.7699026741943047,
                -0.5873179542866175,
                -0.3678314989981802,
                -0.1252334085114689,
                0.1252334085114689,
                0.3678314989981802,
                0.5873179542866175,
                0.7699026741943047,
                0.9041172563704749,
                0.9815606342467192,
            ],
            &[
                0.0471753363865118,
                0.1069393259953184,
                0.1600783285433462,
                0.2031674267230659,
                0.2334925365383548,
                0.2491470458134028,
                0.2491470458134028,
                0.2334925365383548,
                0.2031674267230659,
                0.1600783285433462,
                0.1069393259953184,
                0.0471753363865118,
            ],
        )),

        // n = 13
        13 => Some((
            &[
                -0.9841830547185881,
                -0.9175983992229779,
                -0.8015780907333099,
                -0.6423493394403402,
                -0.4484927510364469,
                -0.2304583159551348,
                0.0,
                0.2304583159551348,
                0.4484927510364469,
                0.6423493394403402,
                0.8015780907333099,
                0.9175983992229779,
                0.9841830547185881,
            ],
            &[
                0.0404840047653159,
                0.0921214998377285,
                0.1388735102197872,
                0.1781459807619457,
                0.2078160475368885,
                0.2262831802628972,
                0.2325515532308739,
                0.2262831802628972,
                0.2078160475368885,
                0.1781459807619457,
                0.1388735102197872,
                0.0921214998377285,
                0.0404840047653159,
            ],
        )),

        // n = 14
        14 => Some((
            &[
                -0.9862838086968123,
                -0.9284348836635735,
                -0.8272013150697650,
                -0.6872929048116855,
                -0.5152486363581541,
                -0.3191123689278897,
                -0.1080549487073437,
                0.1080549487073437,
                0.3191123689278897,
                0.5152486363581541,
                0.6872929048116855,
                0.8272013150697650,
                0.9284348836635735,
                0.9862838086968123,
            ],
            &[
                0.0351194603317519,
                0.0801580871597602,
                0.1215185706879032,
                0.1572031671581935,
                0.1855383974779378,
                0.2051984637212956,
                0.2152638534631578,
                0.2152638534631578,
                0.2051984637212956,
                0.1855383974779378,
                0.1572031671581935,
                0.1215185706879032,
                0.0801580871597602,
                0.0351194603317519,
            ],
        )),

        // n = 15
        15 => Some((
            &[
                -0.9879925180204854,
                -0.9372733924007060,
                -0.8482065834104272,
                -0.7244177313601701,
                -0.5709721726085388,
                -0.3941513470775634,
                -0.2011940939974345,
                0.0,
                0.2011940939974345,
                0.3941513470775634,
                0.5709721726085388,
                0.7244177313601701,
                0.8482065834104272,
                0.9372733924007060,
                0.9879925180204854,
            ],
            &[
                0.0307532419961173,
                0.0703660474881081,
                0.1071592204671719,
                0.1395706779261543,
                0.1662692058169939,
                0.1861610000155622,
                0.1984314853271116,
                0.2025782419255613,
                0.1984314853271116,
                0.1861610000155622,
                0.1662692058169939,
                0.1395706779261543,
                0.1071592204671719,
                0.0703660474881081,
                0.0307532419961173,
            ],
        )),

        16 => Some((
            &[
                -0.9894009349916499,
                -0.9445750230732326,
                -0.8656312023878318,
                -0.7554044083550030,
                -0.6178762444026438,
                -0.4580167776572274,
                -0.2816035507792589,
                -0.0950125098376374,
                0.0950125098376374,
                0.2816035507792589,
                0.4580167776572274,
                0.6178762444026438,
                0.7554044083550030,
                0.8656312023878318,
                0.9445750230732326,
                0.9894009349916499,
            ],
            &[
                0.0271524594117541,
                0.0622535239386479,
                0.0951585116824928,
                0.1246289712555339,
                0.1495959888165767,
                0.1691565193950025,
                0.1826034150449236,
                0.1894506104550685,
                0.1894506104550685,
                0.1826034150449236,
                0.1691565193950025,
                0.1495959888165767,
                0.1246289712555339,
                0.0951585116824928,
                0.0622535239386479,
                0.0271524594117541,
            ],
        )),

        17 => Some((
            &[
                -0.9905754753144174,
                -0.9506755217687678,
                -0.8802391537269859,
                -0.7815140038968014,
                -0.6576711592166907,
                -0.5126905370864769,
                -0.3512317634538763,
                -0.1784841814958479,
                0.0,
                0.1784841814958479,
                0.3512317634538763,
                0.5126905370864769,
                0.6576711592166907,
                0.7815140038968014,
                0.8802391537269859,
                0.9506755217687678,
                0.9905754753144174,
            ],
            &[
                0.0241483028685479,
                0.0554595293739872,
                0.0850361483171792,
                0.1118838471934040,
                0.1351363684685255,
                0.1540457610768103,
                0.1680041021564500,
                0.1765627053669926,
                0.1794464703562065,
                0.1765627053669926,
                0.1680041021564500,
                0.1540457610768103,
                0.1351363684685255,
                0.1118838471934040,
                0.0850361483171792,
                0.0554595293739872,
                0.0241483028685479,
            ],
        )),

        18 => Some((
            &[
                -0.9915651684209309,
                -0.9558239495713977,
                -0.8926024664975557,
                -0.8037049589725231,
                -0.6916870430603532,
                -0.5597708310739475,
                -0.4117511614628426,
                -0.2518862256915055,
                -0.0847750130417353,
                0.0847750130417353,
                0.2518862256915055,
                0.4117511614628426,
                0.5597708310739475,
                0.6916870430603532,
                0.8037049589725231,
                0.8926024664975557,
                0.9558239495713977,
                0.9915651684209309,
            ],
            &[
                0.0216160135264833,
                0.0497145488949698,
                0.0764257302548891,
                0.1009420441062872,
                0.1225552067114785,
                0.1406429146706507,
                0.1546846751262652,
                0.1642764837458327,
                0.1691423829631436,
                0.1691423829631436,
                0.1642764837458327,
                0.1546846751262652,
                0.1406429146706507,
                0.1225552067114785,
                0.1009420441062872,
                0.0764257302548891,
                0.0497145488949698,
                0.0216160135264833,
            ],
        )),

        _ => None,
    }
}

// 映射区间 [a, b] -> [-1, 1]
const fn map_to_canonical(x: f64, a: f64, b: f64) -> f64 {
    let t1 = (b + a) / 2.0;
    let t2 = (b - a) / 2.0;
    t1 + t2 * x
}

// 编译期确定积分点数的高斯积分函数
pub fn integrate<const N: usize, F>(f: F, a: f64, b: f64) -> f64
where
    F: Fn(f64) -> f64,
{
    let (points, weights) =
        gauss_legendre_points::<N>().expect("Unsupported number of Gauss points");

    let mut sum = 0.0;

    // 如果是奇数个点，单独处理中间那个 0 点
    let mid = N / 2;
    if N % 2 == 1 {
        let x = points[mid];
        let w = weights[mid];
        let x_mapped = map_to_canonical(x, a, b);
        sum += w * f(x_mapped);
    }

    // 对称点配对处理
    for i in 0..mid {
        let x = points[i];
        let w = weights[i];

        // 利用对称性：x_left = -x_right
        let x1 = map_to_canonical(x, a, b);
        let x2 = map_to_canonical(-x, a, b);

        let f1 = f(x1);
        let f2 = f(x2);

        sum += w * (f1 + f2);
    }

    let scale = (b - a) / 2.0;
    sum * scale
}

/// 自适应高斯积分函数
///
/// # 参数
/// - `f`: 被积函数
/// - `a`: 积分下限
/// - `b`: 积分上限
/// - `eps_abs`: 绝对误差容限
/// - `depth`: 最大递归深度（一般建议小一点，二十层以上占用较多资源，更高可能会栈溢出）
pub fn integrate_adaptive<F>(f: F, a: f64, b: f64, eps_abs: f64, depth: usize) -> f64
where
    F: Fn(f64) -> f64 + Copy,
{
    // 使用 n=5 和 n=10 的 Gauss 点进行积分比较
    const N: usize = 5;

    let integral_low = integrate::<N, _>(f, a, b);
    let integral_high = integrate::<{ 2 * N }, _>(f, a, b);

    let error = (integral_high - integral_low).abs();

    // 如果误差小于容限 或 已达最大递归深度，则返回高阶积分结果
    if error < eps_abs || depth == 0 {
        integral_high
    } else {
        let mid = (a + b) / 2.0;
        integrate_adaptive(f, a, mid, eps_abs * 0.5, depth - 1)
            + integrate_adaptive(f, mid, b, eps_abs * 0.5, depth - 1)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test_gauss_legendre_point_n<const N: usize>() {
        if let Some((points, weights)) = gauss_legendre_points::<N>() {
            assert_eq!(points.len(), N);
            assert_eq!(weights.len(), N);

            // 检查对称性：第i个点和第n-1-i个点应该对称
            for i in 0..N / 2 {
                let j = N - 1 - i;
                assert!(
                    (points[i] + points[j]).abs() < 1e-12,
                    "Points are not symmetric at i={}",
                    i
                );
            }

            // 检查在区间[-1,1]上对1的积分为2
            let sum_weights: f64 = weights.iter().sum();
            assert!(
                (sum_weights - 2.0).abs() < f64::EPSILON * 2.05,
                "Sum of weights for N={} is {}, not equal to 2.0",
                N,
                sum_weights
            );
        } else {
            panic!(
                "Failed to get Gauss-Legendre points and weights for N = {}",
                N
            );
        }
    }

    #[test]
    fn test_gauss_legendre_points() {
        test_gauss_legendre_point_n::<1>();
        test_gauss_legendre_point_n::<2>();
        test_gauss_legendre_point_n::<3>();
        test_gauss_legendre_point_n::<4>();
        test_gauss_legendre_point_n::<5>();
        test_gauss_legendre_point_n::<6>();
        test_gauss_legendre_point_n::<7>();
        test_gauss_legendre_point_n::<8>();
        test_gauss_legendre_point_n::<9>();
        test_gauss_legendre_point_n::<10>();
        test_gauss_legendre_point_n::<11>();
        test_gauss_legendre_point_n::<12>();
        test_gauss_legendre_point_n::<13>();
        test_gauss_legendre_point_n::<14>();
        test_gauss_legendre_point_n::<15>();
        test_gauss_legendre_point_n::<16>();
        test_gauss_legendre_point_n::<17>();
        test_gauss_legendre_point_n::<18>();
    }

    #[test]
    fn test_integrate_sin_5() {
        let result = integrate::<12, _>(|x| x.sin(), 0.0, std::f64::consts::PI);
        let expected = 2.0;
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_exp_10() {
        let result = integrate::<10, _>(|x| x.exp(), 0.0, 1.0);
        let expected = std::f64::consts::E - 1.0;
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_constant_2() {
        let result = integrate::<1, _>(|_| 1.0, -1.0, 1.0);
        let expected = 2.0;
        assert!((result - expected).abs() < f64::EPSILON, "Got: {}", result);
    }

    #[test]
    fn test_integrate_quadratic_3() {
        // ∫_{-1}^{1} x^2 dx = 2/3 ≈ 0.6666666666666666
        let result = integrate::<2, _>(|x| x * x, -1.0, 1.0);
        let expected = 2.0 / 3.0;
        assert!((result - expected).abs() < f64::EPSILON, "Got: {}", result);
    }

    #[test]
    fn test_integrate_zero_interval() {
        // 区间长度为零，积分应为 0
        let result = integrate::<5, _>(|x| x.sin(), 100.0, 100.0);
        assert!(result.abs() < f64::EPSILON, "Got: {}", result);
    }

    #[test]
    fn test_integrate_large_interval() {
        // 区间非常大：∫_{-1e6}^{1e6} e^{-x^2} dx ≈ sqrt(π) （近似）
        let result = integrate_adaptive::<_>(|x| (-x * x).exp(), -80.0, 80.0, 1e-15, 10);
        let expected = std::f64::consts::PI.sqrt();
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_min_max_values() {
        // 使用最大最小浮点数测试稳定性
        let result = integrate::<10, _>(|x| x, f64::MIN / 2., f64::MAX / 2.);
        print!("{:e}", result);
        assert!(result.abs() < f64::EPSILON, "Result should be finite");
    }

    #[test]
    fn test_integrate_discontinuous_function() {
        // 分段函数：x < 0 ? 0 : 1，在 [-1, 1] 上积分应为 1
        let result = integrate::<10, _>(|x| if x < 0.0 { 0.0 } else { 1.0 }, -1.0, 1.0);
        let expected = 1.0;
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_high_frequency_oscillation() {
        // 高频震荡函数：sin(1/x) 在 [0.001, 1] 上积分
        let result = integrate::<10, _>(|x| (1.0 / x).sin(), 0.000000001, 1.0);
        assert!(result.is_finite(), "Got: {}", result);
    }

    const EPS: f64 = 1e-12;

    #[test]
    fn test_constant_function() {
        let result = integrate_adaptive(|_| 1.0, 0.0, 10.0, EPS, 10);
        let expected = 10.0;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_linear_function() {
        let result = integrate_adaptive(|x| x, 0.0, 1.0, EPS, 10);
        let expected = 0.5;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_quadratic_function() {
        let result = integrate_adaptive(|x| x * x, -1.0, 1.0, EPS, 10);
        let expected = 2.0 / 3.0;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_exp_function() {
        let result = integrate_adaptive(|x| x.exp(), 0.0, 1.0, EPS, 10);
        let expected = std::f64::consts::E - 1.0;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_sin_function() {
        let result = integrate_adaptive(|x| x.sin(), 0.0, std::f64::consts::PI, EPS, 10);
        let expected = 2.0;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_discontinuous_function() {
        let result = integrate_adaptive(|x| if x < 0.0 { 0.0 } else { 1.0 }, -1.0, 1.0, EPS, 10);
        let expected = 1.0;
        assert!((result - expected).abs() < 1e-8, "Got: {}", result);
    }

    #[test]
    fn test_high_frequency_oscillation() {
        // sin(1/x) 在 [0.001, 1] 上积分
        let result = integrate_adaptive(|x| (1.0 / x).sin(), 0.001, 1.0, 1e-8, 10);
        assert!(result.is_finite(), "Result should be finite");
    }

    #[test]
    fn test_gaussian_large_interval() {
        // ∫_{-inf}^{inf} e^{-x^2} dx ≈ sqrt(pi)
        let result = integrate_adaptive(|x| (-x * x).exp(), -8.0, 8.0, 1e-10, 10);
        let expected = std::f64::consts::PI.sqrt();
        assert!((result - expected).abs() < 1e-10, "Got: {}", result);
    }

    #[test]
    fn test_zero_interval() {
        let result = integrate_adaptive(|x| x.sin(), 100.0, 100.0, EPS, 10);
        assert!(
            result.abs() < EPS,
            "Integral over zero-length interval should be 0"
        );
    }

    #[test]
    fn test_negative_interval() {
        let result = integrate_adaptive(|x| x * x, -2.0, -1.0, EPS, 10);
        let expected = ((-1.0_f64).powi(3) - (-2.0_f64).powi(3)) / 3.0;
        assert!((result - expected).abs() < EPS, "Got: {}", result);
    }

    #[test]
    fn test_large_depth_recursion() {
        let a: f64 = 0.0;
        let b: f64 = 10000.0;
        let result = integrate_adaptive(|x| x.sin(), a, b, EPS, 16); //26层以内应该可以算1e8
        let expected = -b.cos() + a.cos();
        assert!(
            (result - expected).abs() < EPS,
            "Got: {} Expected: {}",
            result,
            expected
        );
    }
}
