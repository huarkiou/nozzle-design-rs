// 返回 Gauss-Legendre 积分点和权重数组（精度达 f64 上限）
const fn gauss_legendre_points<const N: usize>() -> Option<(&'static [f64], &'static [f64])> {
    match N {
        1 => Some((&[0.0], &[2.0])),

        2 => Some((&[-0.5773502691896257, 0.5773502691896257], &[1.0, 1.0])),

        3 => Some((
            &[-0.7745966692414834, 0.0, 0.7745966692414834],
            &[0.5555555555555556, 0.8888888888888888, 0.5555555555555556],
        )),

        4 => Some((
            &[
                -0.8611363115940526,
                -0.3399810435848563,
                0.3399810435848563,
                0.8611363115940526,
            ],
            &[
                0.34785484513745385,
                0.6521451548625462,
                0.6521451548625462,
                0.34785484513745385,
            ],
        )),

        5 => Some((
            &[
                -0.9061798459386640,
                -0.5384693101056831,
                0.0,
                0.5384693101056831,
                0.9061798459386640,
            ],
            &[
                0.23692688505618908,
                0.47862867049936647,
                0.5688888888888889,
                0.47862867049936647,
                0.23692688505618908,
            ],
        )),

        6 => Some((
            &[
                -0.9324695142031521,
                -0.6612093864662645,
                -0.2386191860831969,
                0.2386191860831969,
                0.6612093864662645,
                0.9324695142031521,
            ],
            &[
                0.17132449237917036,
                0.3607615730481386,
                0.4679139345726910,
                0.4679139345726910,
                0.3607615730481386,
                0.17132449237917036,
            ],
        )),

        7 => Some((
            &[
                -0.9491079123427585,
                -0.7415311855993945,
                -0.4058451513773972,
                0.0,
                0.4058451513773972,
                0.7415311855993945,
                0.9491079123427585,
            ],
            &[
                0.12948496616886969,
                0.27970539148927664,
                0.3818300505051189,
                0.4179591836734694,
                0.3818300505051189,
                0.27970539148927664,
                0.12948496616886969,
            ],
        )),

        8 => Some((
            &[
                -0.9602898564975363,
                -0.7966664774136267,
                -0.5255324099163289,
                -0.1834346424956498,
                0.1834346424956498,
                0.5255324099163289,
                0.7966664774136267,
                0.9602898564975363,
            ],
            &[
                0.10122853629037626,
                0.22238103445337448,
                0.31370664587788727,
                0.3626837833783622,
                0.3626837833783622,
                0.31370664587788727,
                0.22238103445337448,
                0.10122853629037626,
            ],
        )),

        9 => Some((
            &[
                -0.9681602395076261,
                -0.8360311073266358,
                -0.6133714327005904,
                -0.3255242819007267,
                0.0,
                0.3255242819007267,
                0.6133714327005904,
                0.8360311073266358,
                0.9681602395076261,
            ],
            &[
                0.0812743883615744,
                0.1806481606948574,
                0.26061069640293545,
                0.3123470770400028,
                0.3302393550012598,
                0.3123470770400028,
                0.26061069640293545,
                0.1806481606948574,
                0.0812743883615744,
            ],
        )),

        10 => Some((
            &[
                -0.9739065285171717,
                -0.8650633666889845,
                -0.6794095682990244,
                -0.4333953941292472,
                -0.1488743389816312,
                0.1488743389816312,
                0.4333953941292472,
                0.6794095682990244,
                0.8650633666889845,
                0.9739065285171717,
            ],
            &[
                0.06667134430868814,
                0.1494513491505806,
                0.21908636251598204,
                0.26926671930999635,
                0.29552422471475287,
                0.29552422471475287,
                0.26926671930999635,
                0.21908636251598204,
                0.1494513491505806,
                0.06667134430868814,
            ],
        )),

        // n = 11
        11 => Some((
            &[
                -0.9782286581460570,
                -0.8870625997680953,
                -0.7301520055740542,
                -0.5190961292068118,
                -0.2695431559523450,
                0.0,
                0.2695431559523450,
                0.5190961292068118,
                0.7301520055740542,
                0.8870625997680953,
                0.9782286581460570,
            ],
            &[
                0.0556685671161737,
                0.1255803694649046,
                0.18629021092773426,
                0.2331937645919905,
                0.2628045445102467,
                0.2729250867779007,
                0.2628045445102467,
                0.2331937645919905,
                0.18629021092773426,
                0.1255803694649046,
                0.0556685671161737,
            ],
        )),

        // n = 12
        12 => Some((
            &[
                -0.1252334085114689,
                0.1252334085114689,
                -0.3678314989981802,
                0.3678314989981802,
                -0.5873179542866175,
                0.5873179542866175,
                -0.7699026741943047,
                0.7699026741943047,
                -0.9041172563704749,
                0.9041172563704749,
                -0.9815606342467192,
                0.9815606342467192,
            ],
            &[
                0.2491470458134028,
                0.2491470458134028,
                0.2334925365383548,
                0.2334925365383548,
                0.2031674267230659,
                0.2031674267230659,
                0.1600783285433462,
                0.1600783285433462,
                0.1069393259953184,
                0.1069393259953184,
                0.0471753363865118,
                0.0471753363865118,
            ],
        )),

        // n = 13
        13 => Some((
            &[
                -0.9841830547185881,
                -0.9175983992229779,
                -0.8015780907333099,
                -0.6423493394403402,
                -0.4484927510364469,
                -0.2304583159551348,
                0.0,
                0.2304583159551348,
                0.4484927510364469,
                0.6423493394403402,
                0.8015780907333099,
                0.9175983992229779,
                0.9841830547185881,
            ],
            &[
                0.0404840047653159,
                0.0921214998377285,
                0.1388735102197872,
                0.1781459807619457,
                0.2078160475368885,
                0.2262831802628972,
                0.2325515532308739,
                0.2262831802628972,
                0.2078160475368885,
                0.1781459807619457,
                0.1388735102197872,
                0.0921214998377285,
                0.0404840047653159,
            ],
        )),

        // n = 14
        14 => Some((
            &[
                -0.9862838086968123,
                -0.9284348836635735,
                -0.8272013150697650,
                -0.6872929048116855,
                -0.5152486363581541,
                -0.3191123689278897,
                -0.1080549487073437,
                0.1080549487073437,
                0.3191123689278897,
                0.5152486363581541,
                0.6872929048116855,
                0.8272013150697650,
                0.9284348836635735,
                0.9862838086968123,
            ],
            &[
                0.0351194603317519,
                0.0801580871597602,
                0.1215185706879032,
                0.1572031671581935,
                0.1855383974779378,
                0.2051984637212956,
                0.2152638534631578,
                0.2152638534631578,
                0.2051984637212956,
                0.1855383974779378,
                0.1572031671581935,
                0.1215185706879032,
                0.0801580871597602,
                0.0351194603317519,
            ],
        )),

        // n = 15
        15 => Some((
            &[
                -0.9879925180204854,
                -0.9372733924007060,
                -0.8482065834104272,
                -0.7244177313601701,
                -0.5709721726085388,
                -0.3941513470775634,
                -0.2011940939974345,
                0.0,
                0.2011940939974345,
                0.3941513470775634,
                0.5709721726085388,
                0.7244177313601701,
                0.8482065834104272,
                0.9372733924007060,
                0.9879925180204854,
            ],
            &[
                0.0307532419961173,
                0.0703660474881081,
                0.1071592204671719,
                0.1395706779261543,
                0.1662692058169939,
                0.1861610000155622,
                0.1984314853271116,
                0.2025782419255613,
                0.1984314853271116,
                0.1861610000155622,
                0.1662692058169939,
                0.1395706779261543,
                0.1071592204671719,
                0.0703660474881081,
                0.0307532419961173,
            ],
        )),

        _ => None,
    }
}

// 映射区间 [a, b] -> [-1, 1]
const fn map_to_canonical(x: f64, a: f64, b: f64) -> f64 {
    let t1 = (b + a) / 2.0;
    let t2 = (b - a) / 2.0;
    t1 + t2 * x
}

// 编译期确定积分点数的高斯积分函数
pub fn integrate<const N: usize, F>(f: F, a: f64, b: f64) -> f64
where
    F: Fn(f64) -> f64,
{
    let (points, weights) =
        gauss_legendre_points::<N>().expect("Unsupported number of Gauss points");

    let mut sum = 0.0;

    for i in 0..N {
        let x = points[i];
        let w = weights[i];

        let x_mapped = map_to_canonical(x, a, b);
        sum += w * f(x_mapped);
    }

    let scale = (b - a) / 2.0;
    sum * scale
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_integrate_sin_5() {
        let result = integrate::<12, _>(|x| x.sin(), 0.0, std::f64::consts::PI);
        let expected = 2.0;
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_exp_10() {
        let result = integrate::<10, _>(|x| x.exp(), 0.0, 1.0);
        let expected = std::f64::consts::E - 1.0;
        assert!((result - expected).abs() < 1e-15, "Got: {}", result);
    }

    #[test]
    fn test_integrate_constant_2() {
        let result = integrate::<1, _>(|_| 1.0, -1.0, 1.0);
        let expected = 2.0;
        assert!((result - expected).abs() < f64::EPSILON, "Got: {}", result);
    }

    #[test]
    fn test_integrate_quadratic_3() {
        // ∫_{-1}^{1} x^2 dx = 2/3 ≈ 0.6666666666666666
        let result = integrate::<2, _>(|x| x * x, -1.0, 1.0);
        let expected = 2.0 / 3.0;
        assert!((result - expected).abs() < f64::EPSILON, "Got: {}", result);
    }
}
